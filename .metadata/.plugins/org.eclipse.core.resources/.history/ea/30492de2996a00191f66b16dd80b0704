package interview1;
import java.util.*;
/* Key = Any Data
 * Hash Table = Map Data to hash values i.e. ints or longs
 * 1st -> Compute Data's Hash code -> Hash code not unique to one Key
 * 2nd -> Map the Hash code to index in array. Can map two codes to same index
 * 3rd -> At index -> Linked List of Keys and Values.
 * Runtime -> Good Implementation - O(1). Worst Case - O(N)
 * Alternatively -> Hash Table can be a Balanced BST -> Runtime O(logN)
 */
public class HashTable {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

	
/*
 * merge = double array list
 * runtime = O(N) but happens so rarely that amoritized is O(1)
 */
ArrayList<String> merge(String[] words, String[] more){
	ArrayList<String> sentence = new ArrayList<String>();
	for(String w : words) sentence.add(w);
	for(String w:more) sentence.add(w);
	return sentence;
}

String sConcatanator(String[] words) {
	String sentence = "";
	
	for(String w : words) sentence += w;
}



	
}
